<програма>              ::= program <program name> <operators list> endprogram
<program name>			::= <identifier>
<operators list>        ::= <operator> <delimiter> | <operator> <delimiter> <operators list> | <empty>
<operator>              ::= <loop operator> | <conditional operator> | <input operator> | <output operator> | <declaration operator> | <set operator>
<loop operator>         ::= do while (<logical expression>) <operators list> enddo
<conditional operator>  ::= if <logical expression> then <operators list> fi
<input operator>        ::= read ( <identifier> )
<output operator>       ::= write ( <identifier> )
<declaration operator>  ::= var <identifier> | var <identifier> set <arithmetic expression>
<set operator>          ::= <identifier> set <arithmetic expression>
<logical expression>    ::= <arithmetic expression> equals <arithmetic expression>
								| <arithmetic expression> greaterthn <arithmetic expression>
								| <arithmetic expression> lessthn <arithmetic expression>
<arithmetic expression> ::= <sign> <arithmetic leaf> 
                                | (<arithmetic expression>)
                                | <arithmetic expression> <operation> <arithmetic expression>
<arithmetic leaf>       ::= <decimal> | <identifier>
<operation>             ::= + | - | * | /
<decimal>               ::= <sign> <unsigned> | <sign><unsigned>.<unsigned>
<unsigned>              ::= <number> | <number> <unsigned>
<sign>                  ::= + | - | <empty>
<number>                ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<identifier>            ::= @ <word>
<word>                  ::= <letter> | <number> | <letter> <word> | <number> <word>
<letter>                ::= a-z
<delimiter>             ::= \n



Operator		Priority
program			0
endprogram		0
do				1
while			1
enddo			1
if				1
then			1
fi				1
read			2
write			2
(				3
)				3
var				2
set				2
equals			3
+ (binary)		4
- (binary)		4
*				5
/				5
+ (unary)		6   // @+
- (unary)		6   // @-